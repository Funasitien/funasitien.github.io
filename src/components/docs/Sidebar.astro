---
import { getCollection } from "astro:content";

const docs = await getCollection("docuception");

// Props definition
export interface Props {
  currentSlug?: string;
  currentCategory?: string;
  showAll?: boolean;
}

const { currentSlug, currentCategory, showAll = false } = Astro.props;
---
{docs
  .filter((doc) => !doc.data.draft && doc.data?.title)
  .reduce((acc, doc) => {
    const slugSegments = doc.slug.replace(/^\/+|\/+$/g, '').split('/');
    const isIndexFile = doc.slug.endsWith('/index') || doc.slug.endsWith('/index.md');
    const categorySlug = slugSegments[0];
    
    // Skip if filtering and not current category
    if (!showAll && currentCategory && categorySlug !== currentCategory) {
      return acc;
    }

    let categoryName = categorySlug;
    let categoryOrder = undefined; // Default to undefined for proper sorting
    
    if (isIndexFile) {
      categoryName = doc.data.title || categorySlug;
      categoryOrder = doc.data.order; // Get order from index file
    } else if (categorySlug) {
      const indexDoc = docs.find(d => 
        (d.slug === `${categorySlug}/index` || d.slug === `${categorySlug}/index.md`) &&
        d.data?.title
      );
      categoryName = indexDoc?.data.title || categorySlug;
      categoryOrder = indexDoc?.data.order;
    }

    if (categorySlug) {
      const existingGroup = acc.find((group) => group.categorySlug === categorySlug);
      if (existingGroup) {
        existingGroup.items.push({
          ...doc,
          order: doc.data.order
        });
      } else {
        acc.push({
          categorySlug,
          categoryName: categoryName.charAt(0).toUpperCase() + categoryName.slice(1),
          categoryOrder,
          items: [{
            ...doc,
            order: doc.data.order
          }]
        });
      }
    } else {
      acc.push({ 
        items: [{
          ...doc,
          order: doc.data.order
        }] 
      });
    }
    return acc;
  }, [])
  .filter(group => 
    showAll || 
    !currentSlug || 
    (group.categorySlug && currentSlug.startsWith(`/${group.categorySlug}`))
  )
  // Sort categories: Numbers first, undefined last
  .sort((a, b) => {
    if (a.categoryOrder === undefined) return 1;
    if (b.categoryOrder === undefined) return -1;
    return a.categoryOrder - b.categoryOrder;
  })
  .map((group) =>
    group.categorySlug ? (
        <ul class="menu w-full p-4 gap-y-2">
          {group.items
            .filter(doc => !doc.slug.endsWith('/index') && !doc.slug.endsWith('/index.md'))
            // Sort items: Numbers first, undefined last
            .sort((a, b) => {
              if (a.order === undefined) return 1;
              if (b.order === undefined) return -1;
              return a.order - b.order;
            })
            .map((doc) => (
              <li key={doc.slug}>
                <a 
                  href={`/${doc.slug}`}
                  class={currentSlug === `/${doc.slug}/` ? 'menu-active' : ''}
                >
                  {doc.data.title}
                </a>
              </li>
            ))}
        </ul>
    ) : (
      // Sort root items: Numbers first, undefined last
      group.items
        .sort((a, b) => {
          if (a.order === undefined) return 1;
          if (b.order === undefined) return -1;
          return a.order - b.order;
        })
        .map((doc) => (
          <li key={doc.slug}>
            <a 
              href={`/${doc.slug}`}
              class={currentSlug === `/${doc.slug}` ? 'menu-active' : ''}
            >
              {doc.data.title}
            </a>
          </li>
        ))
    )
  )}
